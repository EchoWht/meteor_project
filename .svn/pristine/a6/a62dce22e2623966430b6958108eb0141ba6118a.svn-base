{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/collections/posts.js","filenameRelative":"/collections/posts.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/collections/posts.js.map","sourceFileName":"/collections/posts.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"posts"},"ignored":false,"code":"Posts = new Mongo.Collection('posts');\nvalidatePost = function validatePost(post) {\n    var errors = {};\n    if (!post.title) errors.title = \"请填写标题\";\n    if (!post.url) errors.url = \"请填写 URL\";\n    return errors;\n};\n/*允许用户编辑*/\nPosts.allow({\n    update: function () {\n        function update(userId, post) {\n            return ownsDocument(userId, post);\n        }\n\n        return update;\n    }(),\n    remove: function () {\n        function remove(userId, post) {\n            return ownsDocument(userId, post);\n        }\n\n        return remove;\n    }()\n});\n/*限制用户编辑的字段*/\nPosts.deny({\n    update: function () {\n        function update(userId, post, fieldNames) {\n            // 只能更改如下两个字段：\n            return _.without(fieldNames, 'url', 'title').length > 0;\n        }\n\n        return update;\n    }()\n});\n/*修改*/\nPosts.deny({\n    update: function () {\n        function update(userId, post, fieldNames, modifier) {\n            var errors = validatePost(modifier.$set);\n            return errors.title || errors.url;\n        }\n\n        return update;\n    }()\n});\nMeteor.methods({\n    postInsert: function () {\n        function postInsert(postAttributes) {\n            check(Meteor.userId(), String);\n            check(postAttributes, {\n                title: String,\n                url: String\n            });\n            /*防止用户通过控制台来插入数据*/\n            var errors = validatePost(postAttributes);\n            if (errors.title || errors.url) throw new Meteor.Error('invalid-post', \"你必须为你的帖子填写标题和 URL\");\n            /*防止重复*/\n            var postWithSameLink = Posts.findOne({ url: postAttributes.url });\n            if (postWithSameLink) {\n                return {\n                    postExists: true,\n                    _id: postWithSameLink._id\n                };\n            }\n\n            var user = Meteor.user();\n            var post = _.extend(postAttributes, {\n                userId: user._id,\n                author: user.username,\n                submitted: new Date(),\n                commentsCount: 0,\n                upvoters: [],\n                votes: 0\n            });\n            var postId = Posts.insert(post);\n            return {\n                _id: postId\n            };\n        }\n\n        return postInsert;\n    }(),\n    upvote: function () {\n        function upvote(postId) {\n            check(this.userId, String);\n            check(postId, String);\n\n            var affected = Posts.update({\n                _id: postId,\n                upvoters: { $ne: this.userId }\n            }, {\n                $addToSet: { upvoters: this.userId },\n                $inc: { votes: 1 }\n            });\n            if (!affected) throw new Meteor.Error('invalid', \"You weren't able to upvote that post\");\n        }\n\n        return upvote;\n    }()\n});","ast":null,"map":{"version":3,"sources":["/collections/posts.js"],"names":[],"mappings":"AAAA,QAAQ,IAAI,MAAM,UAAN,CAAiB,OAArB,CAAR;AACA,eAAe,sBAAU,IAAV,EAAgB;AAC3B,QAAI,SAAS,EAAT,CADuB;AAE3B,QAAI,CAAC,KAAK,KAAL,EACD,OAAO,KAAP,GAAe,OAAf,CADJ;AAEA,QAAI,CAAC,KAAK,GAAL,EACD,OAAO,GAAP,GAAc,SAAd,CADJ;AAEA,WAAO,MAAP,CAN2B;CAAhB;;AASf,MAAM,KAAN,CAAY;AACR;AAAQ,wBAAS,MAAT,EAAiB,IAAjB,EAAuB;AAAE,mBAAO,aAAa,MAAb,EAAqB,IAArB,CAAP,CAAF;SAAvB;;;OAAR;AACA;AAAQ,wBAAS,MAAT,EAAiB,IAAjB,EAAuB;AAAE,mBAAO,aAAa,MAAb,EAAqB,IAArB,CAAP,CAAF;SAAvB;;;OAAR;CAFJ;;AAKA,MAAM,IAAN,CAAW;AACP;AAAQ,wBAAS,MAAT,EAAiB,IAAjB,EAAuB,UAAvB,EAAmC;;AAEvC,mBAAQ,EAAE,OAAF,CAAU,UAAV,EAAsB,KAAtB,EAA6B,OAA7B,EAAsC,MAAtC,GAA+C,CAA/C,CAF+B;SAAnC;;;OAAR;CADJ;;AAOA,MAAM,IAAN,CAAW;AACP;AAAQ,wBAAS,MAAT,EAAiB,IAAjB,EAAuB,UAAvB,EAAmC,QAAnC,EAA6C;AACjD,gBAAI,SAAS,aAAa,SAAS,IAAT,CAAtB,CAD6C;AAEjD,mBAAO,OAAO,KAAP,IAAgB,OAAO,GAAP,CAF0B;SAA7C;;;OAAR;CADJ;AAMA,OAAO,OAAP,CAAe;AACX;AAAY,4BAAS,cAAT,EAAyB;AACjC,kBAAM,OAAO,MAAP,EAAN,EAAuB,MAAvB,EADiC;AAEjC,kBAAM,cAAN,EAAsB;AAClB,uBAAO,MAAP;AACA,qBAAK,MAAL;aAFJ;;AAFiC,gBAO5B,SAAS,aAAa,cAAb,CAAT,CAP4B;AAQjC,gBAAI,OAAO,KAAP,IAAgB,OAAO,GAAP,EAChB,MAAM,IAAI,OAAO,KAAP,CAAa,cAAjB,EAAiC,mBAAjC,CAAN,CADJ;;AARiC,gBAW7B,mBAAmB,MAAM,OAAN,CAAc,EAAC,KAAK,eAAe,GAAf,EAApB,CAAnB,CAX6B;AAYjC,gBAAI,gBAAJ,EAAsB;AAClB,uBAAO;AACH,gCAAY,IAAZ;AACA,yBAAK,iBAAiB,GAAjB;iBAFT,CADkB;aAAtB;;AAOA,gBAAI,OAAO,OAAO,IAAP,EAAP,CAnB6B;AAoBjC,gBAAI,OAAO,EAAE,MAAF,CAAS,cAAT,EAAyB;AAChC,wBAAQ,KAAK,GAAL;AACR,wBAAQ,KAAK,QAAL;AACR,2BAAW,IAAI,IAAJ,EAAX;AACA,+BAAe,CAAf;AACA,0BAAU,EAAV;AACA,uBAAO,CAAP;aANO,CAAP,CApB6B;AA4BjC,gBAAI,SAAS,MAAM,MAAN,CAAa,IAAb,CAAT,CA5B6B;AA6BjC,mBAAO;AACH,qBAAK,MAAL;aADJ,CA7BiC;SAAzB;;;OAAZ;AAkCA;AAAQ,wBAAS,MAAT,EAAiB;AACrB,kBAAM,KAAK,MAAL,EAAa,MAAnB,EADqB;AAErB,kBAAM,MAAN,EAAc,MAAd,EAFqB;;AAIrB,gBAAI,WAAW,MAAM,MAAN,CAAa;AACxB,qBAAK,MAAL;AACA,0BAAU,EAAC,KAAK,KAAK,MAAL,EAAhB;aAFW,EAGZ;AACC,2BAAW,EAAC,UAAU,KAAK,MAAL,EAAtB;AACA,sBAAM,EAAC,OAAO,CAAP,EAAP;aALW,CAAX,CAJiB;AAWrB,gBAAI,CAAE,QAAF,EACA,MAAM,IAAI,OAAO,KAAP,CAAa,SAAjB,EAA4B,sCAA5B,CAAN,CADJ;SAXI;;;OAAR;CAnCJ","file":"/collections/posts.js.map","sourcesContent":["Posts = new Mongo.Collection('posts');\r\nvalidatePost = function (post) {\r\n    var errors = {};\r\n    if (!post.title)\r\n        errors.title = \"请填写标题\";\r\n    if (!post.url)\r\n        errors.url =  \"请填写 URL\";\r\n    return errors;\r\n};\r\n/*允许用户编辑*/\r\nPosts.allow({\r\n    update: function(userId, post) { return ownsDocument(userId, post); },\r\n    remove: function(userId, post) { return ownsDocument(userId, post); }\r\n});\r\n/*限制用户编辑的字段*/\r\nPosts.deny({\r\n    update: function(userId, post, fieldNames) {\r\n        // 只能更改如下两个字段：\r\n        return (_.without(fieldNames, 'url', 'title').length > 0);\r\n    }\r\n});\r\n/*修改*/\r\nPosts.deny({\r\n    update: function(userId, post, fieldNames, modifier) {\r\n        var errors = validatePost(modifier.$set);\r\n        return errors.title || errors.url;\r\n    }\r\n});\r\nMeteor.methods({\r\n    postInsert: function(postAttributes) {\r\n        check(Meteor.userId(), String);\r\n        check(postAttributes, {\r\n            title: String,\r\n            url: String\r\n        });\r\n        /*防止用户通过控制台来插入数据*/\r\n         var errors = validatePost(postAttributes);\r\n        if (errors.title || errors.url)\r\n            throw new Meteor.Error('invalid-post', \"你必须为你的帖子填写标题和 URL\");\r\n        /*防止重复*/\r\n        var postWithSameLink = Posts.findOne({url: postAttributes.url});\r\n        if (postWithSameLink) {\r\n            return {\r\n                postExists: true,\r\n                _id: postWithSameLink._id\r\n            }\r\n        }\r\n\r\n        var user = Meteor.user();\r\n        var post = _.extend(postAttributes, {\r\n            userId: user._id,\r\n            author: user.username,\r\n            submitted: new Date(),\r\n            commentsCount: 0,\r\n            upvoters: [],\r\n            votes: 0\r\n        });\r\n        var postId = Posts.insert(post);\r\n        return {\r\n            _id: postId\r\n        };\r\n\r\n    },\r\n    upvote: function(postId) {\r\n        check(this.userId, String);\r\n        check(postId, String);\r\n\r\n        var affected = Posts.update({\r\n            _id: postId,\r\n            upvoters: {$ne: this.userId}\r\n        }, {\r\n            $addToSet: {upvoters: this.userId},\r\n            $inc: {votes: 1}\r\n        });\r\n        if (! affected)\r\n            throw new Meteor.Error('invalid', \"You weren't able to upvote that post\");\r\n    }\r\n});"]},"hash":"53d30188825d01297eef480a7b90e4e436cbe13a"}
