[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"lib\":{\"comments.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// lib/comments.js                                                                                             //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n/**                                                                                                            //\n * Created by Administrator on 2016-06-12.                                                                     //\n */                                                                                                            //\nComments = new Mongo.Collection('comments');                                                                   // 4\nMeteor.methods({                                                                                               // 5\n    commentInsert: function () {                                                                               // 6\n        function commentInsert(commentAttributes) {                                                            // 6\n            check(this.userId, String);                                                                        // 7\n            check(commentAttributes, {                                                                         // 8\n                postId: String,                                                                                // 9\n                body: String                                                                                   // 10\n            });                                                                                                //\n            var user = Meteor.user();                                                                          // 12\n            var post = Posts.findOne(commentAttributes.postId);                                                // 13\n            if (!post) throw new Meteor.Error('invalid-comment', 'You must comment on a post');                // 14\n            comment = _.extend(commentAttributes, {                                                            // 16\n                userId: user._id,                                                                              // 17\n                author: user.username,                                                                         // 18\n                submitted: new Date()                                                                          // 19\n            });                                                                                                //\n            // 更新帖子的评论数                                                                                        //\n            Posts.update(comment.postId, { $inc: { commentsCount: 1 } });                                      // 6\n            // return Comments.insert(comment);                                                                //\n            // create the comment, save the id                                                                 //\n            comment._id = Comments.insert(comment);                                                            // 6\n            // now create a notification, informing the user that there's been a comment                       //\n            createCommentNotification(comment);                                                                // 6\n            return comment._id;                                                                                // 28\n        }                                                                                                      //\n                                                                                                               //\n        return commentInsert;                                                                                  //\n    }()                                                                                                        //\n});                                                                                                            //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"notifications.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// lib/notifications.js                                                                                        //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n/**                                                                                                            //\n * Created by Administrator on 2016-06-12.                                                                     //\n */                                                                                                            //\nNotifications = new Mongo.Collection('notifications');                                                         // 4\n                                                                                                               //\nNotifications.allow({                                                                                          // 6\n    update: function () {                                                                                      // 7\n        function update(userId, doc, fieldNames) {                                                             // 7\n            return ownsDocument(userId, doc) && fieldNames.length === 1 && fieldNames[0] === 'read';           // 8\n        }                                                                                                      //\n                                                                                                               //\n        return update;                                                                                         //\n    }()                                                                                                        //\n});                                                                                                            //\n                                                                                                               //\ncreateCommentNotification = function createCommentNotification(comment) {                                      // 13\n    var post = Posts.findOne(comment.postId);                                                                  // 14\n    if (comment.userId !== post.userId) {                                                                      // 15\n        Notifications.insert({                                                                                 // 16\n            userId: post.userId,                                                                               // 17\n            postId: post._id,                                                                                  // 18\n            commentId: comment._id,                                                                            // 19\n            commenterName: comment.author,                                                                     // 20\n            read: false                                                                                        // 21\n        });                                                                                                    //\n    }                                                                                                          //\n};                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"permissions.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// lib/permissions.js                                                                                          //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n/**                                                                                                            //\n * Created by Administrator on 2016-06-12.                                                                     //\n */                                                                                                            //\nownsDocument = function ownsDocument(userId, doc) {                                                            // 4\n  return doc && doc.userId === userId;                                                                         // 5\n};                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"router.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// lib/router.js                                                                                               //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\nRouter.configure({                                                                                             // 1\n  layoutTemplate: 'layout',                                                                                    // 2\n  loadingTemplate: 'loading',                                                                                  // 3\n  notFoundTemplate: 'notFound',                                                                                // 4\n  waitOn: function () {                                                                                        // 5\n    function waitOn() {                                                                                        // 5\n      return [Meteor.subscribe('notifications')];                                                              // 6\n    }                                                                                                          //\n                                                                                                               //\n    return waitOn;                                                                                             //\n  }()                                                                                                          //\n});                                                                                                            //\nPostsListController = RouteController.extend({                                                                 // 9\n  template: 'postsList',                                                                                       // 10\n  increment: 5,                                                                                                // 11\n  postsLimit: function () {                                                                                    // 12\n    function postsLimit() {                                                                                    // 12\n      return parseInt(this.params.postsLimit) || this.increment;                                               // 13\n    }                                                                                                          //\n                                                                                                               //\n    return postsLimit;                                                                                         //\n  }(),                                                                                                         //\n  findOptions: function () {                                                                                   // 15\n    function findOptions() {                                                                                   // 15\n      return { sort: this.sort, limit: this.postsLimit() };                                                    // 16\n    }                                                                                                          //\n                                                                                                               //\n    return findOptions;                                                                                        //\n  }(),                                                                                                         //\n  subscriptions: function () {                                                                                 // 18\n    function subscriptions() {                                                                                 // 18\n      this.postsSub = Meteor.subscribe('posts', this.findOptions());                                           // 19\n    }                                                                                                          //\n                                                                                                               //\n    return subscriptions;                                                                                      //\n  }(),                                                                                                         //\n  posts: function () {                                                                                         // 21\n    function posts() {                                                                                         // 21\n      return Posts.find({}, this.findOptions());                                                               // 22\n    }                                                                                                          //\n                                                                                                               //\n    return posts;                                                                                              //\n  }(),                                                                                                         //\n  data: function () {                                                                                          // 24\n    function data() {                                                                                          // 24\n      var hasMore = this.posts().count() === this.postsLimit();                                                // 25\n      return {                                                                                                 // 26\n        posts: this.posts(),                                                                                   // 27\n        ready: this.postsSub.ready,                                                                            // 28\n        nextPath: hasMore ? this.nextPath() : null                                                             // 29\n      };                                                                                                       //\n    }                                                                                                          //\n                                                                                                               //\n    return data;                                                                                               //\n  }()                                                                                                          //\n});                                                                                                            //\nNewPostsController = PostsListController.extend({                                                              // 33\n  sort: { submitted: -1, _id: -1 },                                                                            // 34\n  nextPath: function () {                                                                                      // 35\n    function nextPath() {                                                                                      // 35\n      return Router.routes.newPosts.path({ postsLimit: this.postsLimit() + this.increment });                  // 36\n    }                                                                                                          //\n                                                                                                               //\n    return nextPath;                                                                                           //\n  }()                                                                                                          //\n});                                                                                                            //\nBestPostsController = PostsListController.extend({                                                             // 39\n  sort: { votes: -1, submitted: -1, _id: -1 },                                                                 // 40\n  nextPath: function () {                                                                                      // 41\n    function nextPath() {                                                                                      // 41\n      return Router.routes.bestPosts.path({ postsLimit: this.postsLimit() + this.increment });                 // 42\n    }                                                                                                          //\n                                                                                                               //\n    return nextPath;                                                                                           //\n  }()                                                                                                          //\n});                                                                                                            //\nRouter.route('/', {                                                                                            // 45\n  name: 'home',                                                                                                // 46\n  controller: NewPostsController                                                                               // 47\n});                                                                                                            //\nRouter.route('/new/:postsLimit?', { name: 'newPosts' });                                                       // 49\nRouter.route('/best/:postsLimit?', { name: 'bestPosts' });                                                     // 50\nRouter.route('/posts/:_id', {                                                                                  // 51\n  name: 'postPage',                                                                                            // 52\n  waitOn: function () {                                                                                        // 53\n    function waitOn() {                                                                                        // 53\n      return [Meteor.subscribe('singlePost', this.params._id), Meteor.subscribe('comments', this.params._id)];\n    }                                                                                                          //\n                                                                                                               //\n    return waitOn;                                                                                             //\n  }(),                                                                                                         //\n  data: function () {                                                                                          // 59\n    function data() {                                                                                          // 59\n      return Posts.findOne(this.params._id);                                                                   // 59\n    }                                                                                                          //\n                                                                                                               //\n    return data;                                                                                               //\n  }()                                                                                                          //\n});                                                                                                            //\n                                                                                                               //\nRouter.route('/posts/:_id/edit', {                                                                             // 62\n  name: 'postEdit',                                                                                            // 63\n  waitOn: function () {                                                                                        // 64\n    function waitOn() {                                                                                        // 64\n      return Meteor.subscribe('singlePost', this.params._id);                                                  // 65\n    }                                                                                                          //\n                                                                                                               //\n    return waitOn;                                                                                             //\n  }(),                                                                                                         //\n  data: function () {                                                                                          // 67\n    function data() {                                                                                          // 67\n      return Posts.findOne(this.params._id);                                                                   // 67\n    }                                                                                                          //\n                                                                                                               //\n    return data;                                                                                               //\n  }()                                                                                                          //\n});                                                                                                            //\n                                                                                                               //\nRouter.route('/submit', { name: 'postSubmit' });                                                               // 70\n                                                                                                               //\nRouter.route('/:postsLimit?', {                                                                                // 72\n  name: 'postsList'                                                                                            // 73\n});                                                                                                            //\n                                                                                                               //\nvar requireLogin = function requireLogin() {                                                                   // 76\n  if (!Meteor.user()) {                                                                                        // 77\n    if (Meteor.loggingIn()) {                                                                                  // 78\n      this.render(this.loadingTemplate);                                                                       // 79\n    } else {                                                                                                   //\n      this.render('accessDenied');                                                                             // 81\n    }                                                                                                          //\n  } else {                                                                                                     //\n    this.next();                                                                                               // 84\n  }                                                                                                            //\n};                                                                                                             //\n                                                                                                               //\nRouter.onBeforeAction('dataNotFound', { only: 'postPage' });                                                   // 88\nRouter.onBeforeAction(requireLogin, { only: 'postSubmit' });                                                   // 89\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"collections\":{\"posts.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// collections/posts.js                                                                                        //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\nPosts = new Mongo.Collection('posts');                                                                         // 1\nvalidatePost = function validatePost(post) {                                                                   // 2\n    var errors = {};                                                                                           // 3\n    if (!post.title) errors.title = \"请填写标题\";                                                                   // 4\n    if (!post.url) errors.url = \"请填写 URL\";                                                                     // 6\n    return errors;                                                                                             // 8\n};                                                                                                             //\n/*允许用户编辑*/                                                                                                     //\nPosts.allow({                                                                                                  // 11\n    update: function () {                                                                                      // 12\n        function update(userId, post) {                                                                        // 12\n            return ownsDocument(userId, post);                                                                 // 12\n        }                                                                                                      //\n                                                                                                               //\n        return update;                                                                                         //\n    }(),                                                                                                       //\n    remove: function () {                                                                                      // 13\n        function remove(userId, post) {                                                                        // 13\n            return ownsDocument(userId, post);                                                                 // 13\n        }                                                                                                      //\n                                                                                                               //\n        return remove;                                                                                         //\n    }()                                                                                                        //\n});                                                                                                            //\n/*限制用户编辑的字段*/                                                                                                  //\nPosts.deny({                                                                                                   // 16\n    update: function () {                                                                                      // 17\n        function update(userId, post, fieldNames) {                                                            // 17\n            // 只能更改如下两个字段：                                                                                     //\n            return _.without(fieldNames, 'url', 'title').length > 0;                                           // 19\n        }                                                                                                      //\n                                                                                                               //\n        return update;                                                                                         //\n    }()                                                                                                        //\n});                                                                                                            //\n/*修改*/                                                                                                         //\nPosts.deny({                                                                                                   // 23\n    update: function () {                                                                                      // 24\n        function update(userId, post, fieldNames, modifier) {                                                  // 24\n            var errors = validatePost(modifier.$set);                                                          // 25\n            return errors.title || errors.url;                                                                 // 26\n        }                                                                                                      //\n                                                                                                               //\n        return update;                                                                                         //\n    }()                                                                                                        //\n});                                                                                                            //\nMeteor.methods({                                                                                               // 29\n    postInsert: function () {                                                                                  // 30\n        function postInsert(postAttributes) {                                                                  // 30\n            check(Meteor.userId(), String);                                                                    // 31\n            check(postAttributes, {                                                                            // 32\n                title: String,                                                                                 // 33\n                url: String                                                                                    // 34\n            });                                                                                                //\n            /*防止用户通过控制台来插入数据*/                                                                                 //\n            var errors = validatePost(postAttributes);                                                         // 30\n            if (errors.title || errors.url) throw new Meteor.Error('invalid-post', \"你必须为你的帖子填写标题和 URL\");       // 38\n            /*防止重复*/                                                                                           //\n            var postWithSameLink = Posts.findOne({ url: postAttributes.url });                                 // 30\n            if (postWithSameLink) {                                                                            // 42\n                return {                                                                                       // 43\n                    postExists: true,                                                                          // 44\n                    _id: postWithSameLink._id                                                                  // 45\n                };                                                                                             //\n            }                                                                                                  //\n                                                                                                               //\n            var user = Meteor.user();                                                                          // 49\n            var post = _.extend(postAttributes, {                                                              // 50\n                userId: user._id,                                                                              // 51\n                author: user.username,                                                                         // 52\n                submitted: new Date(),                                                                         // 53\n                commentsCount: 0,                                                                              // 54\n                upvoters: [],                                                                                  // 55\n                votes: 0                                                                                       // 56\n            });                                                                                                //\n            var postId = Posts.insert(post);                                                                   // 58\n            return {                                                                                           // 59\n                _id: postId                                                                                    // 60\n            };                                                                                                 //\n        }                                                                                                      //\n                                                                                                               //\n        return postInsert;                                                                                     //\n    }(),                                                                                                       //\n    upvote: function () {                                                                                      // 64\n        function upvote(postId) {                                                                              // 64\n            check(this.userId, String);                                                                        // 65\n            check(postId, String);                                                                             // 66\n                                                                                                               //\n            var affected = Posts.update({                                                                      // 68\n                _id: postId,                                                                                   // 69\n                upvoters: { $ne: this.userId }                                                                 // 70\n            }, {                                                                                               //\n                $addToSet: { upvoters: this.userId },                                                          // 72\n                $inc: { votes: 1 }                                                                             // 73\n            });                                                                                                //\n            if (!affected) throw new Meteor.Error('invalid', \"You weren't able to upvote that post\");          // 75\n        }                                                                                                      //\n                                                                                                               //\n        return upvote;                                                                                         //\n    }()                                                                                                        //\n});                                                                                                            //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"server\":{\"fixtures.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// server/fixtures.js                                                                                          //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\nif (Posts.find().count() === 0) {                                                                              // 1\n  var now = new Date().getTime();                                                                              // 2\n                                                                                                               //\n  // create two users                                                                                          //\n  var tomId = Meteor.users.insert({                                                                            // 1\n    profile: { name: 'Tom Coleman' }                                                                           // 6\n  });                                                                                                          //\n  var tom = Meteor.users.findOne(tomId);                                                                       // 8\n  var sachaId = Meteor.users.insert({                                                                          // 9\n    profile: { name: 'Sacha Greif' }                                                                           // 10\n  });                                                                                                          //\n  var sacha = Meteor.users.findOne(sachaId);                                                                   // 12\n                                                                                                               //\n  var telescopeId = Posts.insert({                                                                             // 14\n    title: 'Introducing Telescope',                                                                            // 15\n    userId: sacha._id,                                                                                         // 16\n    author: sacha.profile.name,                                                                                // 17\n    url: 'http://sachagreif.com/introducing-telescope/',                                                       // 18\n    submitted: new Date(now - 7 * 3600 * 1000),                                                                // 19\n    commentsCount: 2,                                                                                          // 20\n    upvoters: [],                                                                                              // 21\n    votes: 0                                                                                                   // 22\n  });                                                                                                          //\n                                                                                                               //\n  Comments.insert({                                                                                            // 25\n    postId: telescopeId,                                                                                       // 26\n    userId: tom._id,                                                                                           // 27\n    author: tom.profile.name,                                                                                  // 28\n    submitted: new Date(now - 5 * 3600 * 1000),                                                                // 29\n    body: 'Interesting project Sacha, can I get involved?'                                                     // 30\n  });                                                                                                          //\n                                                                                                               //\n  Comments.insert({                                                                                            // 33\n    postId: telescopeId,                                                                                       // 34\n    userId: sacha._id,                                                                                         // 35\n    author: sacha.profile.name,                                                                                // 36\n    submitted: new Date(now - 3 * 3600 * 1000),                                                                // 37\n    body: 'You sure can Tom!'                                                                                  // 38\n  });                                                                                                          //\n                                                                                                               //\n  Posts.insert({                                                                                               // 41\n    title: 'Meteor',                                                                                           // 42\n    userId: tom._id,                                                                                           // 43\n    author: tom.profile.name,                                                                                  // 44\n    url: 'http://meteor.com',                                                                                  // 45\n    submitted: new Date(now - 10 * 3600 * 1000),                                                               // 46\n    commentsCount: 0,                                                                                          // 47\n    upvoters: [],                                                                                              // 48\n    votes: 0                                                                                                   // 49\n  });                                                                                                          //\n                                                                                                               //\n  Posts.insert({                                                                                               // 52\n    title: 'The Meteor Book',                                                                                  // 53\n    userId: tom._id,                                                                                           // 54\n    author: tom.profile.name,                                                                                  // 55\n    url: 'http://themeteorbook.com',                                                                           // 56\n    submitted: new Date(now - 12 * 3600 * 1000),                                                               // 57\n    commentsCount: 0,                                                                                          // 58\n    upvoters: [],                                                                                              // 59\n    votes: 0                                                                                                   // 60\n  });                                                                                                          //\n                                                                                                               //\n  for (var i = 0; i < 10; i++) {                                                                               // 63\n    Posts.insert({                                                                                             // 64\n      title: 'Test post #' + i,                                                                                // 65\n      author: sacha.profile.name,                                                                              // 66\n      userId: sacha._id,                                                                                       // 67\n      url: 'http://google.com/?q=test-' + i,                                                                   // 68\n      submitted: new Date(now - i * 3600 * 1000 + 1),                                                          // 69\n      commentsCount: 0,                                                                                        // 70\n      upvoters: [],                                                                                            // 71\n      votes: 0                                                                                                 // 72\n    });                                                                                                        //\n  }                                                                                                            //\n}                                                                                                              //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"publications.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// server/publications.js                                                                                      //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\nMeteor.publish('posts', function (options) {                                                                   // 1\n  check(options, {                                                                                             // 2\n    sort: Object,                                                                                              // 3\n    limit: Number                                                                                              // 4\n  });                                                                                                          //\n  return Posts.find({}, options);                                                                              // 6\n});                                                                                                            //\nMeteor.publish('singlePost', function (id) {                                                                   // 8\n  check(id, String);                                                                                           // 9\n  return Posts.find(id);                                                                                       // 10\n});                                                                                                            //\nMeteor.publish('comments', function (postId) {                                                                 // 12\n  check(postId, String);                                                                                       // 13\n  return Comments.find({ postId: postId });                                                                    // 14\n});                                                                                                            //\n                                                                                                               //\nMeteor.publish('notifications', function () {                                                                  // 17\n  return Notifications.find({ userId: this.userId });                                                          // 18\n});                                                                                                            //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":[\"meteor/meteor\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// server/main.js                                                                                              //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\nvar _meteor = require('meteor/meteor');                                                                        // 1\n                                                                                                               //\n//Meteor.subscribe('posts');                                                                                   //\n_meteor.Meteor.startup(function () {                                                                           // 3\n  // code to run on server at startup                                                                          //\n});                                                                                                            //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./lib/comments.js\");\nrequire(\"./lib/notifications.js\");\nrequire(\"./lib/permissions.js\");\nrequire(\"./lib/router.js\");\nrequire(\"./collections/posts.js\");\nrequire(\"./server/fixtures.js\");\nrequire(\"./server/publications.js\");\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/lib/comments.js","/lib/notifications.js","/lib/permissions.js","/lib/router.js","/collections/posts.js","/server/fixtures.js","/server/publications.js","/server/main.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["/**\r\n * Created by Administrator on 2016-06-12.\r\n */\r\nComments = new Mongo.Collection('comments');\r\nMeteor.methods({\r\n    commentInsert: function(commentAttributes) {\r\n        check(this.userId, String);\r\n        check(commentAttributes, {\r\n            postId: String,\r\n            body: String\r\n        });\r\n        var user = Meteor.user();\r\n        var post = Posts.findOne(commentAttributes.postId);\r\n        if (!post)\r\n            throw new Meteor.Error('invalid-comment', 'You must comment on a post');\r\n        comment = _.extend(commentAttributes, {\r\n            userId: user._id,\r\n            author: user.username,\r\n            submitted: new Date()\r\n        });\r\n        // 更新帖子的评论数\r\n        Posts.update(comment.postId, {$inc: {commentsCount: 1}});\r\n        // return Comments.insert(comment);\r\n        // create the comment, save the id\r\n        comment._id = Comments.insert(comment);\r\n        // now create a notification, informing the user that there's been a comment\r\n        createCommentNotification(comment);\r\n        return comment._id;\r\n    }\r\n});","/**\r\n * Created by Administrator on 2016-06-12.\r\n */\r\nNotifications = new Mongo.Collection('notifications');\r\n\r\nNotifications.allow({\r\n    update: function(userId, doc, fieldNames) {\r\n        return ownsDocument(userId, doc) &&\r\n            fieldNames.length === 1 && fieldNames[0] === 'read';\r\n    }\r\n});\r\n\r\ncreateCommentNotification = function(comment) {\r\n    var post = Posts.findOne(comment.postId);\r\n    if (comment.userId !== post.userId) {\r\n        Notifications.insert({\r\n            userId: post.userId,\r\n            postId: post._id,\r\n            commentId: comment._id,\r\n            commenterName: comment.author,\r\n            read: false\r\n        });\r\n    }\r\n};","/**\r\n * Created by Administrator on 2016-06-12.\r\n */\r\nownsDocument = function(userId, doc) {\r\n    return doc && doc.userId === userId;\r\n}","Router.configure({\n  layoutTemplate: 'layout',\n  loadingTemplate: 'loading',\n  notFoundTemplate: 'notFound',\n  waitOn: function() {\n    return [Meteor.subscribe('notifications')]\n  }\n});\nPostsListController = RouteController.extend({\n  template: 'postsList',\n  increment: 5,\n  postsLimit: function() {\n    return parseInt(this.params.postsLimit) || this.increment;\n  },\n  findOptions: function() {\n    return {sort: this.sort, limit: this.postsLimit()};\n  },\n  subscriptions: function() {\n    this.postsSub = Meteor.subscribe('posts', this.findOptions());\n  },\n  posts: function() {\n    return Posts.find({}, this.findOptions());\n  },\n  data: function() {\n    var hasMore = this.posts().count() === this.postsLimit();\n    return {\n      posts: this.posts(),\n      ready: this.postsSub.ready,\n      nextPath: hasMore ? this.nextPath() : null\n    };\n  }\n});\nNewPostsController = PostsListController.extend({\n  sort: {submitted: -1, _id: -1},\n  nextPath: function() {\n    return Router.routes.newPosts.path({postsLimit: this.postsLimit() + this.increment})\n  }\n});\nBestPostsController = PostsListController.extend({\n  sort: {votes: -1, submitted: -1, _id: -1},\n  nextPath: function() {\n    return Router.routes.bestPosts.path({postsLimit: this.postsLimit() + this.increment})\n  }\n});\nRouter.route('/', {\n  name: 'home',\n  controller: NewPostsController\n});\nRouter.route('/new/:postsLimit?', {name: 'newPosts'});\nRouter.route('/best/:postsLimit?', {name: 'bestPosts'});\nRouter.route('/posts/:_id', {\n  name: 'postPage',\n  waitOn: function() {\n    return [\n      Meteor.subscribe('singlePost', this.params._id),\n      Meteor.subscribe('comments', this.params._id)\n    ];\n  },\n  data: function() { return Posts.findOne(this.params._id); }\n});\n\nRouter.route('/posts/:_id/edit', {\n  name: 'postEdit',\n  waitOn: function() {\n    return Meteor.subscribe('singlePost', this.params._id);\n  },\n  data: function() { return Posts.findOne(this.params._id); }\n});\n\nRouter.route('/submit', {name: 'postSubmit'});\n\nRouter.route('/:postsLimit?', {\n  name: 'postsList',\n});\n\nvar requireLogin = function() {\n  if (! Meteor.user()) {\n    if (Meteor.loggingIn()) {\n      this.render(this.loadingTemplate);\n    } else {\n      this.render('accessDenied');\n    }\n  } else {\n    this.next();\n  }\n}\n\nRouter.onBeforeAction('dataNotFound', {only: 'postPage'});\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});","Posts = new Mongo.Collection('posts');\r\nvalidatePost = function (post) {\r\n    var errors = {};\r\n    if (!post.title)\r\n        errors.title = \"请填写标题\";\r\n    if (!post.url)\r\n        errors.url =  \"请填写 URL\";\r\n    return errors;\r\n};\r\n/*允许用户编辑*/\r\nPosts.allow({\r\n    update: function(userId, post) { return ownsDocument(userId, post); },\r\n    remove: function(userId, post) { return ownsDocument(userId, post); }\r\n});\r\n/*限制用户编辑的字段*/\r\nPosts.deny({\r\n    update: function(userId, post, fieldNames) {\r\n        // 只能更改如下两个字段：\r\n        return (_.without(fieldNames, 'url', 'title').length > 0);\r\n    }\r\n});\r\n/*修改*/\r\nPosts.deny({\r\n    update: function(userId, post, fieldNames, modifier) {\r\n        var errors = validatePost(modifier.$set);\r\n        return errors.title || errors.url;\r\n    }\r\n});\r\nMeteor.methods({\r\n    postInsert: function(postAttributes) {\r\n        check(Meteor.userId(), String);\r\n        check(postAttributes, {\r\n            title: String,\r\n            url: String\r\n        });\r\n        /*防止用户通过控制台来插入数据*/\r\n         var errors = validatePost(postAttributes);\r\n        if (errors.title || errors.url)\r\n            throw new Meteor.Error('invalid-post', \"你必须为你的帖子填写标题和 URL\");\r\n        /*防止重复*/\r\n        var postWithSameLink = Posts.findOne({url: postAttributes.url});\r\n        if (postWithSameLink) {\r\n            return {\r\n                postExists: true,\r\n                _id: postWithSameLink._id\r\n            }\r\n        }\r\n\r\n        var user = Meteor.user();\r\n        var post = _.extend(postAttributes, {\r\n            userId: user._id,\r\n            author: user.username,\r\n            submitted: new Date(),\r\n            commentsCount: 0,\r\n            upvoters: [],\r\n            votes: 0\r\n        });\r\n        var postId = Posts.insert(post);\r\n        return {\r\n            _id: postId\r\n        };\r\n\r\n    },\r\n    upvote: function(postId) {\r\n        check(this.userId, String);\r\n        check(postId, String);\r\n\r\n        var affected = Posts.update({\r\n            _id: postId,\r\n            upvoters: {$ne: this.userId}\r\n        }, {\r\n            $addToSet: {upvoters: this.userId},\r\n            $inc: {votes: 1}\r\n        });\r\n        if (! affected)\r\n            throw new Meteor.Error('invalid', \"You weren't able to upvote that post\");\r\n    }\r\n});","if (Posts.find().count() === 0) {\n  var now = new Date().getTime();\n\n  // create two users\n  var tomId = Meteor.users.insert({\n    profile: { name: 'Tom Coleman' }\n  });\n  var tom = Meteor.users.findOne(tomId);\n  var sachaId = Meteor.users.insert({\n    profile: { name: 'Sacha Greif' }\n  });\n  var sacha = Meteor.users.findOne(sachaId);\n\n  var telescopeId = Posts.insert({\n    title: 'Introducing Telescope',\n    userId: sacha._id,\n    author: sacha.profile.name,\n    url: 'http://sachagreif.com/introducing-telescope/',\n    submitted: new Date(now - 7 * 3600 * 1000),\n    commentsCount: 2,\n    upvoters: [],\n    votes: 0\n  });\n\n  Comments.insert({\n    postId: telescopeId,\n    userId: tom._id,\n    author: tom.profile.name,\n    submitted: new Date(now - 5 * 3600 * 1000),\n    body: 'Interesting project Sacha, can I get involved?'\n  });\n\n  Comments.insert({\n    postId: telescopeId,\n    userId: sacha._id,\n    author: sacha.profile.name,\n    submitted: new Date(now - 3 * 3600 * 1000),\n    body: 'You sure can Tom!'\n  });\n\n  Posts.insert({\n    title: 'Meteor',\n    userId: tom._id,\n    author: tom.profile.name,\n    url: 'http://meteor.com',\n    submitted: new Date(now - 10 * 3600 * 1000),\n    commentsCount: 0,\n    upvoters: [],\n    votes: 0\n  });\n\n  Posts.insert({\n    title: 'The Meteor Book',\n    userId: tom._id,\n    author: tom.profile.name,\n    url: 'http://themeteorbook.com',\n    submitted: new Date(now - 12 * 3600 * 1000),\n    commentsCount: 0,\n    upvoters: [],\n    votes: 0\n  });\n\n  for (var i = 0; i < 10; i++) {\n    Posts.insert({\n      title: 'Test post #' + i,\n      author: sacha.profile.name,\n      userId: sacha._id,\n      url: 'http://google.com/?q=test-' + i,\n      submitted: new Date(now - i * 3600 * 1000 + 1),\n      commentsCount: 0,\n      upvoters: [],\n      votes: 0\n    });\n  }\n}","Meteor.publish('posts', function(options) {\n  check(options, {\n    sort: Object,\n    limit: Number\n  });\n  return Posts.find({}, options);\n});\nMeteor.publish('singlePost', function(id) {\n  check(id, String)\n  return Posts.find(id);\n});\nMeteor.publish('comments', function(postId) {\n  check(postId, String);\n  return Comments.find({postId: postId});\n});\n\nMeteor.publish('notifications', function() {\n  return Notifications.find({userId: this.userId});\n});","import { Meteor } from 'meteor/meteor';\n//Meteor.subscribe('posts');\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}}]